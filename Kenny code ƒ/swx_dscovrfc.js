/**
 * DSCOVR Faraday Cup L1 cycle plot.
 * @author jjohnson
 * Date: 6/12/18
 * Time: 12:57 PM
 */
(function ($) {

  // production
//  var HOST = 'ncs-rtsw-proc-lx';
  // my dev only
  HOST = '140.172.223.242';

  var UPDATE_DELAY_MS = 5000;
  var PAUSE_DELAY_MS = 500;
  var REPLAY_DELAY_MS = 1;

  var chart;
  var auxChart;
  var totalChart;
  var intervalsChart;
  var flowAngleChart;
  var customSubtitle;
  var cycles = [];
  var replayCycles = [];
  var prevLastGoodCycle; // the one before the last good, when a spike is triggered, the trigger itself is good, so use the one before it
  var lastGoodCycle;
  var minModlow = 63;
  var maxModlow = 0;
  var maxCount = 0;

  // flow angle scaling
  var H = 0.44;

  var WHITE = '#ffffff';
  var GREEN = '#00bb00';
  var LIGHT_BLUE = '#4244fa';
  var BLUE = '#0508F9'; //'#00b2ff';
  var RED = '#ff0000';

  // disable last good, no longer applies
  var seriesNames = [' ', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', 'previous', 'latest'];
  var seriesColors = [GREEN, '#DCDCDC', '#CFCFCF', '#C2C2C2', '#B5B5B5', '#A8A8A8', '#9B9B9B', '#8E8E8E', '#818181', '#747474', '#676767', '#5A5A5A',
    '#4D4D4D', '#404040', BLUE, RED];
  var seriesWidths = ['5', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '5'];

  var restart = false;
  var paused = false;
  var replaySpeed = 4; // range 1 (slow) to 5 (as fast as possible)
  var replaySpeedMs;
  var replayDate = '';
  var spiking = false;
  var fullRange = true;
  var blackBackground = true;

  /*
   peakMV 14 peak plate 1 madvalue 2430 diffBA 126 diffBC 157
   peakMV 15 peak plate 1 madvalue 2466 diffBA 108 diffBC 122
   peakMV 16 peak plate 1 madvalue 2472 diffBA 98 diffBC 135
   peakMV 17 peak plate 1 madvalue 2453 diffBA 92 diffBC 146
   peakMV 18 peak plate 1 madvalue 2461 diffBA 86 diffBC 146
   peakMV 19 peak plate 1 madvalue 2446 diffBA 69 diffBC 121
   peakMV 20 peak plate 1 madvalue 2493 diffBA 75 diffBC 128
   peakMV 21 peak plate 1 madvalue 2449 diffBA 73 diffBC 114
   peakMV 22 peak plate 1 madvalue 2467 diffBA 74 diffBC 110
   peakMV 23 peak plate 1 madvalue 2441 diffBA 75 diffBC 107
   peakMV 24 peak plate 1 madvalue 2461 diffBA 79 diffBC 107
   peakMV 25 peak plate 1 madvalue 2448 diffBA 81 diffBC 106
   peakMV 26 peak plate 1 madvalue 2458 diffBA 85 diffBC 107
   peakMV 27 peak plate 1 madvalue 2424 diffBA 79 diffBC 95
   peakMV 28 peak plate 1 madvalue 2459 diffBA 92 diffBC 106
   peakMV 29 peak plate 1 madvalue 2435 diffBA 78 diffBC 87
   peakMV 30 peak plate 1 madvalue 2438 diffBA 79 diffBC 88
   peakMV 31 peak plate 1 madvalue 2448 diffBA 87 diffBC 88
   peakMV 32 peak plate 1 madvalue 2433 diffBA 79 diffBC 75
   peakMV 33 peak plate 1 madvalue 2428 diffBA 79 diffBC 71
   peakMV 34 peak plate 1 madvalue 2437 diffBA 82 diffBC 65
   peakMV 35 peak plate 1 madvalue 2415 diffBA 72 diffBC 53
   peakMV 36 peak plate 1 madvalue 2440 diffBA 80 diffBC 54
   peakMV 37 peak plate 1 madvalue 2419 diffBA 67 diffBC 40
   peakMV 38 peak plate 1 madvalue 2425 diffBA 69 diffBC 38
   peakMV 39 peak plate 1 madvalue 2425 diffBA 70 diffBC 32
   peakMV 40 peak plate 1 madvalue 2415 diffBA 64 diffBC 24
   peakMV 41 peak plate 1 madvalue 2414 diffBA 61 diffBC 16
   peakMV 42 peak plate 1 madvalue 2419 diffBA 58 diffBC 1
   peakMV 43 peak plate 1 madvalue 2409 diffBA 48 diffBC 1

   peakMV 44 peak plate 2 madvalue 2448 diffCA 76 diffCB 30 //  modlow 37
   peakMV 45 peak plate 2 madvalue 2416 diffCA 61 diffCB 31
   peakMV 46 peak plate 2 madvalue 2399 diffCA 71 diffCB 54
   peakMV 47 peak plate 2 madvalue 2368 diffCA 71 diffCB 77
   peakMV 48 peak plate 2 madvalue 2402 diffCA 100 diffCB 116
   peakMV 49 peak plate 2 madvalue 2394 diffCA 105 diffCB 124
   peakMV 50 peak plate 2 madvalue 2395 diffCA 124 diffCB 167
   peakMV 51 peak plate 2 madvalue 2391 diffCA 96 diffCB 130

   0 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   1 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   2 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   3 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   4 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   5 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   6 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   7 avg-mad-mux-2 * * * * * * * * * * * * * 2245 2305 2292 2194 2148 2118 2210 2151 2252 2256 2268 2238 2246 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2181 2189 2190 2154 2240 2241 2381 2430 2412 2339 2293 2270 2314 2287 2335 2337 2347 2337 2345 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2212 2274 2251 2134 2111 * 2113 * 2182 2190 2217 2186 2207 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   8 avg-mad-mux-2 * * * * * * * * * * * 2127 * 2164 2274 2358 2322 2219 2132 2210 2148 2249 2256 2272 2243 2242 2223 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2177 2181 2148 2225 2165 2310 2405 2467 2437 2345 2281 2315 2287 2335 2338 2348 2338 2342 2337 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2144 2250 2344 2284 2156 2141 2117 2136 2178 2190 2220 2189 2201 2185 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   9 avg-mad-mux-2 * * * * * * * * * * * 2121 * 2141 2201 2318 2374 2326 2202 2223 2147 2243 2248 2273 2252 2245 2220 2262 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2174 2154 2222 2150 2268 2330 2425 2472 2426 2335 2327 2292 2334 2335 2348 2341 2343 2336 2356 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2140 2175 2280 2337 2268 2181 2137 2143 2171 2181 2221 2198 2205 2183 2244 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   10 avg-mad-mux-2 * * * * * * * * * * * 2127 * 2137 2160 2214 2304 2362 2310 2267 2166 2242 2241 2266 2257 2261 2221 2261 2201 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2151 2214 2152 2246 2271 2339 2415 2453 2414 2363 2308 2337 2336 2347 2341 2346 2335 2355 2333 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2111 * 2128 2162 2185 2249 2308 2238 2193 2152 2174 2176 2215 2202 2217 2183 2243 2184 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   11 avg-mad-mux-2 * * * * * * * * * * * 2122 * 2130 2141 2147 2191 2316 2376 2352 2238 2253 2243 2263 2252 2268 2237 2258 2197 2260 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2214 2154 2235 2240 2277 2325 2413 2461 2429 2358 2347 2340 2348 2341 2349 2339 2353 2331 2356 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2137 * 2127 2143 2157 2181 2251 2316 2299 2195 2191 2183 2216 2201 2225 2198 2241 2182 2258 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   12 avg-mad-mux-2 * * * * * * * * * * * * * 2128 2136 2132 2147 2202 2310 2377 2320 2280 2247 2260 2244 2261 2249 2268 2189 2255 2246 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2157 2224 2222 2247 2257 2326 2407 2447 2414 2368 2345 2349 2340 2347 2341 2355 2327 2353 2350 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2120 2114 2139 2152 2172 2264 2325 2254 2222 2188 2213 2193 2219 2206 2247 2171 2252 2250 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   13 avg-mad-mux-2 * * * * * * * * * * * * * 2127 2129 2147 2170 2164 2235 2370 2418 2381 2313 2282 2247 2254 2245 2284 2207 2251 2243 2213 2238 2232 2262 2231 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2226 2224 2246 2245 2290 2354 2443 2493 2451 2399 2370 2348 2348 2341 2360 2331 2351 2348 2336 2308 2296 2273 2220 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2120 2134 2134 2178 2182 2219 2318 2365 2343 2269 2240 2200 2216 2205 2261 2188 2251 2250 2233 2299 2308 2356 2358 * * * * * * * * * * * * * * * * * * * * * * * * * * *
   14 avg-mad-mux-2 * * * * * * * * * * * * * * 2133 2135 2137 2138 2152 2260 2316 2377 2352 2313 2263 2257 2240 2282 2241 2266 2240 2209 2231 2225 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2216 2238 2230 2261 2281 2361 2418 2450 2432 2395 2362 2353 2342 2360 2340 2356 2346 2334 2343 2338 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2113 2118 2133 2168 2192 2254 2336 2312 2274 2217 2217 2198 2257 2210 2258 2243 2223 2254 2256 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   15 avg-mad-mux-2 * * * * * * * * * * * * * * * 2127 2135 2142 2161 2216 2248 2367 2393 2373 2312 2275 2243 2278 2239 2285 2251 2206 2231 2236 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2237 2228 2256 2262 2331 2372 2444 2468 2446 2402 2370 2349 2360 2340 2361 2350 2332 2343 2343 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2117 2127 2132 2183 2156 2211 2322 2357 2341 2274 2239 2203 2255 2209 2273 2252 2221 2254 2267 * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   16 avg-mad-mux-2 * * * * * * * * * * * * * * * * 2147 2135 2140 2184 2168 2294 2341 2366 2340 2301 2256 2280 2233 2285 2279 2222 2224 2231 2202 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2220 2247 2247 2310 2312 2386 2425 2442 2426 2392 2362 2365 2342 2362 2358 2338 2339 2341 2327 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2119 2127 2151 2137 2164 2237 2298 2335 2306 2268 2218 2256 2203 2272 2271 2231 2246 2261 2250 * * * * * * * * * * * * * * * * * * * * * * * * * * * *
   17 avg-mad-mux-2 * * * * * * * * * * * * * * * * * 2131 2138 2175 2157 2262 2309 2364 2383 2362 2304 2296 2240 2284 2279 2250 2225 2228 2204 2248 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2250 2248 2306 2296 2364 2402 2442 2462 2442 2401 2380 2350 2363 2358 2345 2339 2338 2328 2343 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2130 2160 2141 2172 2200 2262 2334 2355 2336 2274 2276 2214 2273 2273 2252 2249 2260 2253 2291 * * * * * * * * * * * * * * * * * * * * * * * * * * *
   18 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * 2128 2165 2146 2230 2256 2310 2344 2367 2340 2317 2253 2284 2275 2255 2268 2240 2197 2247 2176 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2243 2301 2280 2341 2363 2399 2432 2448 2431 2401 2365 2368 2359 2346 2351 2343 2324 2342 2308 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2137 2138 2139 2166 2202 2273 2312 2343 2314 2299 2230 2274 2270 2256 2277 2266 2247 2289 2257 * * * * * * * * * * * * * * * * * * * * * * * * * *
   19 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * 2165 2143 2220 2233 2276 2300 2352 2374 2363 2303 2302 2284 2259 2273 2265 2198 2244 2179 2249 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2302 2278 2335 2348 2374 2400 2437 2459 2439 2403 2384 2368 2350 2353 2350 2324 2339 2309 2335 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2133 2137 2155 2176 2236 2265 2327 2352 2348 2284 2294 2280 2261 2283 2284 2248 2287 2260 2306 * * * * * * * * * * * * * * * * * * * * * * * * *
   20 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * 2132 2205 2210 2244 2242 2283 2312 2346 2310 2308 2287 2258 2272 2275 2240 2240 2164 2240 2230 2195 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2265 2324 2331 2350 2356 2383 2410 2425 2409 2391 2374 2355 2355 2353 2337 2339 2303 2331 2321 2286 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2125 2135 2147 2198 2197 2250 2285 2329 2290 2298 2281 2258 2279 2288 2269 2280 2245 2297 2299 2294 * * * * * * * * * * * * * * * * * * * * * * *
   21 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * 2202 2207 2240 2235 2272 2301 2357 2367 2360 2331 2291 2285 2281 2260 2275 2171 2242 2234 2208 2206 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2327 2334 2351 2356 2380 2408 2439 2460 2438 2413 2385 2370 2360 2344 2351 2305 2330 2322 2300 2297 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2138 2148 2196 2192 2240 2274 2344 2354 2354 2328 2294 2296 2298 2287 2305 2253 2301 2304 2301 2298 * * * * * * * * * * * * * * * * * * * * * *
   22 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * 2193 2224 2205 2231 2235 2299 2314 2358 2341 2298 2286 2280 2261 2287 2220 2239 2225 2196 2213 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2324 2339 2336 2350 2359 2391 2418 2436 2423 2393 2374 2362 2346 2355 2322 2331 2318 2296 2296 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2131 2173 2157 2192 2197 2279 2293 2348 2335 2297 2293 2295 2285 2311 2274 2295 2294 2289 2306 * * * * * * * * * * * * * * * * * * * * * *
   23 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * 2220 2197 2218 2214 2279 2280 2347 2359 2336 2310 2292 2267 2290 2243 2269 2229 2196 2212 2220 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2339 2333 2344 2348 2378 2395 2428 2439 2425 2396 2375 2354 2359 2330 2344 2322 2297 2296 2291 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2168 2147 2177 2173 2257 2254 2335 2351 2332 2315 2306 2292 2314 2288 2312 2297 2289 2305 2316 * * * * * * * * * * * * * * * * * * * * *
   24 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * 2197 2215 2205 2268 2252 2325 2351 2362 2352 2325 2289 2298 2252 2288 2267 2201 2213 2221 2198 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2336 2345 2346 2372 2380 2413 2435 2448 2433 2406 2377 2369 2338 2351 2337 2301 2294 2288 2259 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2146 2176 2170 2246 2228 2316 2345 2361 2358 2339 2315 2325 2299 2325 2319 2295 2308 2318 2319 * * * * * * * * * * * * * * * * * * * *
   25 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * 2208 2190 2250 2210 2285 2306 2329 2355 2345 2308 2306 2259 2290 2280 2234 2212 2215 2190 2245 2201 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2341 2337 2359 2350 2381 2397 2420 2434 2422 2393 2377 2344 2354 2343 2316 2298 2288 2256 2284 2219 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2164 2151 2227 2180 2272 2297 2325 2358 2355 2330 2331 2303 2326 2325 2308 2306 2313 2313 2336 2341 * * * * * * * * * * * * * * * * * *
   26 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * 2179 2240 2190 2265 2273 2283 2330 2349 2330 2318 2265 2290 2280 2258 2257 2218 2186 2243 2180 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2333 2355 2340 2368 2375 2389 2416 2428 2414 2391 2355 2356 2344 2325 2318 2297 2258 2286 2215 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2134 2214 2157 2251 2263 2277 2332 2358 2349 2341 2310 2327 2325 2318 2324 2314 2310 2334 2326 * * * * * * * * * * * * * * * * * *
   27 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * 2240 2183 2259 2262 2259 2305 2341 2355 2353 2306 2310 2293 2269 2270 2246 2189 2242 2181 2256 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2356 2340 2365 2369 2374 2400 2424 2437 2423 2392 2376 2357 2333 2325 2309 2261 2285 2214 2271 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2214 2152 2245 2252 2253 2307 2349 2372 2374 2347 2346 2338 2327 2332 2327 2312 2334 2326 2352 * * * * * * * * * * * * * * * * *
   28 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2173 2250 2246 2228 2264 2292 2313 2344 2315 2314 2294 2267 2268 2267 2217 2235 2169 2248 2242 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2335 2359 2358 2353 2368 2385 2403 2416 2400 2382 2361 2335 2325 2316 2280 2286 2211 2267 2248 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2137 2232 2232 2217 2262 2298 2329 2363 2352 2349 2338 2325 2328 2333 2320 2329 2319 2346 2350 * * * * * * * * * * * * * * * *
   29 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2248 2245 2229 2263 2288 2308 2353 2360 2359 2335 2302 2290 2281 2254 2250 2174 2248 2243 2271 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2361 2360 2356 2370 2385 2403 2426 2441 2424 2400 2368 2346 2329 2296 2298 2213 2263 2243 2267 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2233 2234 2220 2262 2292 2320 2367 2387 2387 2372 2354 2347 2344 2338 2338 2322 2345 2349 2359 * * * * * * * * * * * * * * *
   30 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2237 2214 2238 2254 2255 2308 2317 2353 2342 2310 2294 2285 2262 2283 2196 2243 2235 2264 2231 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2355 2345 2354 2360 2365 2390 2407 2420 2409 2379 2354 2336 2306 2314 2238 2267 2241 2262 2212 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2221 2201 2235 2257 2268 2324 2346 2379 2378 2361 2351 2348 2342 2352 2331 2344 2345 2354 2355 * * * * * * * * * * * * * *
   31 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2211 2234 2243 2237 2288 2287 2344 2357 2342 2322 2303 2275 2290 2235 2249 2230 2258 2225 2240 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2344 2351 2355 2354 2376 2389 2416 2426 2413 2385 2358 2322 2321 2255 2274 2240 2257 2208 2213 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2196 2230 2245 2247 2301 2315 2368 2387 2386 2374 2363 2352 2355 2343 2346 2341 2349 2350 2360 * * * * * * * * * * * * *
   32 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2228 2238 2229 2272 2258 2321 2344 2355 2349 2327 2293 2297 2247 2276 2245 2248 2217 2231 2215 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2346 2349 2346 2365 2368 2397 2416 2426 2412 2383 2343 2330 2265 2285 2248 2251 2199 2204 2173 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2224 2240 2239 2283 2285 2344 2373 2394 2394 2381 2366 2361 2348 2355 2346 2344 2344 2352 2356 * * * * * * * * * * * *
   33 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2226 2213 2252 2222 2287 2306 2329 2351 2343 2308 2306 2257 2285 2268 2262 2214 2225 2206 2256 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2344 2337 2352 2341 2370 2385 2404 2416 2401 2363 2345 2284 2299 2268 2268 2206 2203 2171 2216 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2223 2217 2261 2246 2310 2336 2367 2392 2391 2377 2369 2355 2361 2357 2353 2345 2350 2351 2359 * * * * * * * * * * *
   34 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2211 2244 2209 2266 2279 2296 2336 2354 2338 2327 2277 2294 2278 2288 2253 2228 2210 2258 2207 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2336 2350 2332 2356 2364 2379 2405 2414 2395 2370 2311 2312 2281 2285 2231 2217 2180 2225 2163 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2215 2252 2230 2290 2310 2337 2377 2398 2398 2386 2372 2369 2365 2366 2364 2358 2356 2362 2361 * * * * * * * * * *
   35 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2244 2208 2265 2272 2280 2321 2352 2362 2357 2313 2311 2291 2298 2269 2249 2218 2264 2215 2268 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2351 2335 2356 2359 2367 2393 2415 2419 2402 2350 2331 2297 2297 2246 2230 2188 2229 2167 2228 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2255 2234 2290 2306 2326 2367 2399 2419 2412 2399 2384 2375 2374 2373 2369 2363 2368 2367 2359 * * * * * * * * *
   36 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2195 2249 2251 2250 2286 2322 2344 2362 2333 2325 2303 2307 2280 2277 2245 2273 2226 2272 2267 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2332 2351 2351 2350 2370 2392 2407 2409 2375 2352 2317 2314 2268 2258 2214 2247 2173 2233 2220 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2211 2267 2279 2292 2331 2367 2396 2409 2407 2392 2384 2382 2383 2385 2380 2378 2375 2361 2360 * * * * * * * *
   37 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2256 2259 2257 2290 2323 2348 2376 2373 2360 2331 2322 2290 2283 2261 2272 2213 2274 2270 2247 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2352 2351 2350 2369 2391 2411 2425 2419 2391 2350 2329 2276 2258 2219 2245 2169 2236 2227 2192 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2283 2295 2307 2343 2378 2411 2431 2449 2426 2410 2395 2388 2383 2381 2376 2371 2367 2365 2360 * * * * * * *
   38 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2249 2243 2273 2298 2311 2346 2344 2355 2338 2329 2297 2290 2268 2293 2243 2281 2275 2255 2267 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2351 2346 2361 2373 2380 2397 2390 2385 2357 2340 2291 2276 2235 2269 2191 2244 2227 2189 2205 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2278 2286 2321 2349 2373 2398 2417 2416 2411 2400 2395 2393 2392 2391 2388 2374 2370 2365 2367 * * * * * *
   39 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2242 2272 2301 2314 2345 2334 2345 2328 2325 2292 2286 2265 2293 2259 2288 2287 2270 2279 2272 2234 2288 2244 2290 2280 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2354 2365 2379 2384 2395 2379 2374 2346 2333 2284 2265 2222 2261 2188 2246 2238 2199 2217 2219 2181 2254 2184 2272 2269 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2283 2317 2348 2369 2392 2403 2405 2400 2395 2391 2390 2388 2389 2391 2375 2377 2373 2376 2371 2366 2376 2369 2375 2371
   40 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2263 2297 2323 2352 2330 2329 2300 2297 2265 2265 2242 2283 2246 2289 2283 2258 2271 2270 2249 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2349 2370 2389 2402 2372 2354 2306 2291 2231 2230 2212 2258 2205 2257 2239 2200 2210 2216 2193 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2310 2347 2383 2405 2408 2396 2378 2369 2367 2372 2376 2385 2388 2384 2380 2369 2372 2370 2368 * * * *
   41 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2287 2295 2319 2300 2322 2317 2321 2302 2290 2266 2290 2255 2287 2283 2257 2265 2275 2259 2295 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2355 2352 2361 2330 2338 2320 2321 2286 2273 2230 2258 2192 2242 2230 2190 2201 2226 2197 2260 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2340 2360 2378 2387 2392 2398 2395 2402 2394 2392 2385 2387 2371 2373 2365 2366 2377 2374 2377 * * *
   42 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2321 2342 2313 2315 2295 2306 2282 2289 2272 2298 2261 2291 2285 2256 2257 2254 2246 2298 2247 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2385 2387 2350 2336 2302 2309 2269 2271 2236 2270 2194 2247 2226 2177 2183 2195 2188 2270 2191 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2364 2380 2378 2375 2372 2379 2385 2395 2397 2396 2393 2375 2373 2359 2358 2361 2370 2386 2373 * *
   43 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2338 2318 2317 2296 2301 2276 2283 2272 2302 2271 2299 2295 2270 2267 2253 2233 2293 2248 2288 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2387 2361 2343 2307 2304 2260 2259 2229 2272 2200 2258 2241 2187 2190 2190 2174 2262 2194 2269 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2375 2380 2375 2370 2373 2379 2389 2396 2398 2399 2381 2380 2369 2363 2359 2365 2381 2375 2373 *
   44 avg-mad-mux-2 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2324 2327 2305 2309 2278 2281 2264 2296 2263 2293 2292 2272 2276 2264 2236 2292 2244 2287 2278 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2369 2355 2320 2315 2264 2257 2217 2261 2189 2246 2236 2189 2205 2207 2178 2260 2186 2267 2267 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 2388 2385 2378 2380 2380 2387 2389 2392 2392 2376 2377 2370 2370 2366 2369 2380 2371 2372 2370
   */
  var avgMadvalues = [
    // pre-patch averages
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 0
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 1
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 2
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 3
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 4
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 5
//    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 6
//    [2181, 2189, 2190, 2154, 2240, 2241, 2381, 2430, 2412, 2339, 2293, 2270, 2314, 2287, 2335, 2337, 2347, 2337, 2345], // 7
//    [2177, 2181, 2148, 2225, 2165, 2310, 2405, 2467, 2437, 2345, 2281, 2315, 2287, 2335, 2338, 2348, 2338, 2342, 2337], // 8
//    [2174, 2154, 2222, 2150, 2268, 2330, 2425, 2472, 2426, 2335, 2327, 2292, 2334, 2335, 2348, 2341, 2343, 2336, 2356], // 9
//    [2151, 2214, 2152, 2246, 2271, 2339, 2415, 2453, 2414, 2363, 2308, 2337, 2336, 2347, 2341, 2346, 2335, 2355, 2333], // 10
//    [2214, 2154, 2235, 2240, 2277, 2325, 2413, 2461, 2429, 2358, 2347, 2340, 2348, 2341, 2349, 2339, 2353, 2331, 2356], // 11
//    [2157, 2224, 2222, 2247, 2257, 2326, 2407, 2447, 2414, 2368, 2345, 2349, 2340, 2347, 2341, 2355, 2327, 2353, 2350], // 12
//    [2226, 2224, 2246, 2245, 2290, 2354, 2443, 2493, 2451, 2399, 2370, 2348, 2348, 2341, 2360, 2331, 2351, 2348, 2336, 2308, 2296, 2273, 2220], // 13
//    [2216, 2238, 2230, 2261, 2281, 2361, 2418, 2450, 2432, 2395, 2362, 2353, 2342, 2360, 2340, 2356, 2346, 2334, 2343, 2338], // 14
//    [2237, 2228, 2256, 2262, 2331, 2372, 2444, 2468, 2446, 2402, 2370, 2349, 2360, 2340, 2361, 2350, 2332, 2343, 2343], // 15*
//    [2220, 2247, 2247, 2310, 2312, 2386, 2425, 2442, 2426, 2392, 2362, 2365, 2342, 2362, 2358, 2338, 2339, 2341, 2327], // 16*
//    [2250, 2248, 2306, 2296, 2364, 2402, 2442, 2462, 2442, 2401, 2380, 2350, 2363, 2358, 2345, 2339, 2338, 2328, 2343], // 17 most popular
//    [2243, 2301, 2280, 2341, 2363, 2399, 2432, 2448, 2431, 2401, 2365, 2368, 2359, 2346, 2351, 2343, 2324, 2342, 2308], // 18
//    [2302, 2278, 2335, 2348, 2374, 2400, 2437, 2459, 2439, 2403, 2384, 2368, 2350, 2353, 2350, 2324, 2339, 2309, 2335], // 19
//    [2265, 2324, 2331, 2350, 2356, 2383, 2410, 2425, 2409, 2391, 2374, 2355, 2355, 2353, 2337, 2339, 2303, 2331, 2321, 2286], // 20
//    [2327, 2334, 2351, 2356, 2380, 2408, 2439, 2460, 2438, 2413, 2385, 2370, 2360, 2344, 2351, 2305, 2330, 2322, 2300, 2297], // 21
//    [2324, 2339, 2336, 2350, 2359, 2391, 2418, 2436, 2423, 2393, 2374, 2362, 2346, 2355, 2322, 2331, 2318, 2296, 2296], // 22
//    [2339, 2333, 2344, 2348, 2378, 2395, 2428, 2439, 2425, 2396, 2375, 2354, 2359, 2330, 2344, 2322, 2297, 2296, 2291], // 23
//    [2336, 2345, 2346, 2372, 2380, 2413, 2435, 2448, 2433, 2406, 2377, 2369, 2338, 2351, 2337, 2301, 2294, 2288, 2259], // 24
//    [2341, 2337, 2359, 2350, 2381, 2397, 2420, 2434, 2422, 2393, 2377, 2344, 2354, 2343, 2316, 2298, 2288, 2256, 2284, 2219], // 25
//    [2333, 2355, 2340, 2368, 2375, 2389, 2416, 2428, 2414, 2391, 2355, 2356, 2344, 2325, 2318, 2297, 2258, 2286, 2215], // 26
//    [2356, 2340, 2365, 2369, 2374, 2400, 2424, 2437, 2423, 2392, 2376, 2357, 2333, 2325, 2309, 2261, 2285, 2214, 2271], // 27
//    [2335, 2359, 2358, 2353, 2368, 2385, 2403, 2416, 2400, 2382, 2361, 2335, 2325, 2316, 2280, 2286, 2211, 2267, 2248], // 28
//    [2361, 2360, 2356, 2370, 2385, 2403, 2426, 2441, 2424, 2400, 2368, 2346, 2329, 2296, 2298, 2213, 2263, 2243, 2267], // 29
//    [2237, 2214, 2238, 2254, 2255, 2308, 2317, 2353, 2342, 2310, 2294, 2285, 2262, 2283, 2196, 2243, 2235, 2264, 2231], // 30
//    [2344, 2351, 2355, 2354, 2376, 2389, 2416, 2426, 2413, 2385, 2358, 2322, 2321, 2255, 2274, 2240, 2257, 2208, 2213], // 31
//    [2346, 2349, 2346, 2365, 2368, 2397, 2416, 2426, 2412, 2383, 2343, 2330, 2265, 2285, 2248, 2251, 2199, 2204, 2173], // 32
//    [2344, 2337, 2352, 2341, 2370, 2385, 2404, 2416, 2401, 2363, 2345, 2284, 2299, 2268, 2268, 2206, 2203, 2171, 2216], // 33
//    [2336, 2350, 2332, 2356, 2364, 2379, 2405, 2414, 2395, 2370, 2311, 2312, 2281, 2285, 2231, 2217, 2180, 2225, 2163], // 34
//    [2351, 2335, 2356, 2359, 2367, 2393, 2415, 2419, 2402, 2350, 2331, 2297, 2297, 2246, 2230, 2188, 2229, 2167, 2228], // 35
//    [2332, 2351, 2351, 2350, 2370, 2392, 2407, 2409, 2375, 2352, 2317, 2314, 2268, 2258, 2214, 2247, 2173, 2233, 2220], // 36
////-----
//    [2283, 2295, 2307, 2343, 2378, 2411, 2431, 2449, 2426, 2410, 2395, 2388, 2383, 2381, 2376, 2371, 2367, 2365, 2360], // 37, switch to plate C
//    [2278, 2286, 2321, 2349, 2373, 2398, 2417, 2416, 2411, 2400, 2395, 2393, 2392, 2391, 2388, 2374, 2370, 2365, 2367], // 38
//    [2283, 2317, 2348, 2369, 2392, 2403, 2405, 2400, 2395, 2391, 2390, 2388, 2389, 2391, 2375, 2377, 2373, 2376, 2371, 2366, 2376, 2369, 2375, 2371], // 39 rng
//    [2310, 2347, 2383, 2405, 2408, 2396, 2378, 2369, 2367, 2372, 2376, 2385, 2388, 2384, 2380, 2369, 2372, 2370, 2368], // 40
//    [2340, 2360, 2378, 2387, 2392, 2398, 2395, 2402, 2394, 2392, 2385, 2387, 2371, 2373, 2365, 2366, 2377, 2374, 2377], // 41
//    [2364, 2380, 2378, 2375, 2372, 2379, 2385, 2395, 2397, 2396, 2393, 2375, 2373, 2359, 2358, 2361, 2370, 2386, 2373], // 42
//    [2375, 2380, 2375, 2370, 2373, 2379, 2389, 2396, 2398, 2399, 2381, 2380, 2369, 2363, 2359, 2365, 2381, 2375, 2373], // 43
//    [2388, 2385, 2378, 2380, 2380, 2387, 2389, 2392, 2392, 2376, 2377, 2370, 2370, 2366, 2369, 2380, 2371, 2372, 2370]  // 44

    // post-patch, averages that include background subtraction and deemphasis
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 0
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 1
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 2
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 3
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 4
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 5
    [2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000, 2000], // 6
    [  2103  , 2109  , 2110  , 2084  , 2144  , 2171  , 2284  , 2333  , 2298  , 2225  , 2164  , 2140  , 2156  , 2137  , 2154  , 2148  , 2145  , 2134  , 2135  ],
    [  2097  , 2101  , 2078  , 2129  , 2095  , 2213  , 2308  , 2358  , 2328  , 2221  , 2156  , 2162  , 2142  , 2159  , 2154  , 2151  , 2140  , 2137  , 2130  ],
    [  2094  , 2082  , 2126  , 2079  , 2170  , 2230  , 2313  , 2368  , 2309  , 2217  , 2179  , 2152  , 2163  , 2157  , 2157  , 2148  , 2143  , 2135  , 2139  ],
    [  2076  , 2121  , 2077  , 2148  , 2170  , 2227  , 2314  , 2347  , 2305  , 2219  , 2170  , 2170  , 2162  , 2160  , 2154  , 2152  , 2139  , 2143  , 2127  ],
    [  2121  , 2075  , 2140  , 2146  , 2173  , 2232  , 2312  , 2362  , 2296  , 2229  , 2185  , 2170  , 2166  , 2158  , 2159  , 2148  , 2147  , 2131  , 2136  ],
    [  2080  , 2128  , 2126  , 2139  , 2154  , 2213  , 2297  , 2314  , 2290  , 2213  , 2182  , 2172  , 2162  , 2162  , 2154  , 2153  , 2131  , 2139  , 2135  ],
    [  2130  , 2128  , 2138  , 2142  , 2177  , 2244  , 2309  , 2371  , 2299  , 2239  , 2197  , 2174  , 2168  , 2159  , 2163  , 2141  , 2141  , 2138  , 2130  ],
    [  2120  , 2130  , 2127  , 2148  , 2172  , 2228  , 2299  , 2305  , 2278  , 2227  , 2193  , 2177  , 2165  , 2167  , 2154  , 2151  , 2141  , 2133  , 2134  ],
    [  2129  , 2125  , 2143  , 2153  , 2198  , 2251  , 2297  , 2318  , 2284  , 2238  , 2199  , 2176  , 2173  , 2159  , 2161  , 2150  , 2136  , 2139  , 2134  ],
    [  2117  , 2134  , 2138  , 2177  , 2193  , 2240  , 2276  , 2285  , 2268  , 2227  , 2195  , 2183  , 2166  , 2167  , 2163  , 2146  , 2140  , 2136  , 2130  ],
    [  2137  , 2139  , 2174  , 2177  , 2218  , 2253  , 2286  , 2310  , 2283  , 2239  , 2203  , 2179  , 2173  , 2168  , 2158  , 2145  , 2138  , 2135  , 2137  ],
    [  2133  , 2168  , 2160  , 2195  , 2214  , 2242  , 2279  , 2294  , 2274  , 2228  , 2199  , 2183  , 2174  , 2164  , 2162  , 2148  , 2137  , 2142  , 2124  ],
    [  2169  , 2158  , 2189  , 2199  , 2217  , 2246  , 2282  , 2307  , 2272  , 2242  , 2203  , 2188  , 2173  , 2169  , 2160  , 2142  , 2144  , 2130  , 2135  ],
    [  2145  , 2178  , 2182  , 2193  , 2203  , 2228  , 2258  , 2263  , 2253  , 2216  , 2199  , 2183  , 2176  , 2168  , 2160  , 2149  , 2129  , 2137  , 2128  ],
    [  2181  , 2185  , 2194  , 2203  , 2224  , 2256  , 2277  , 2309  , 2268  , 2243  , 2217  , 2195  , 2180  , 2172  , 2166  , 2137  , 2141  , 2133  , 2116  ],
    [  2177  , 2183  , 2181  , 2191  , 2198  , 2216  , 2241  , 2245  , 2233  , 2211  , 2191  , 2177  , 2170  , 2168  , 2153  , 2147  , 2136  , 2121  , 2118  ],
    [  2182  , 2180  , 2189  , 2196  , 2216  , 2245  , 2264  , 2280  , 2268  , 2232  , 2205  , 2192  , 2184  , 2171  , 2165  , 2144  , 2122  , 2119  , 2108  ],
    [  2183  , 2190  , 2194  , 2210  , 2229  , 2248  , 2275  , 2296  , 2274  , 2241  , 2220  , 2199  , 2184  , 2177  , 2164  , 2132  , 2122  , 2110  , 2093  ],
    [  2185  , 2185  , 2197  , 2199  , 2216  , 2237  , 2268  , 2280  , 2262  , 2241  , 2212  , 2195  , 2185  , 2175  , 2152  , 2131  , 2115  , 2095  , 2106  ],
    [  2181  , 2193  , 2189  , 2203  , 2215  , 2237  , 2262  , 2273  , 2267  , 2231  , 2211  , 2192  , 2181  , 2166  , 2156  , 2129  , 2102  , 2113  , 2069  ],
    [  2194  , 2189  , 2200  , 2209  , 2222  , 2246  , 2269  , 2295  , 2268  , 2253  , 2217  , 2199  , 2179  , 2168  , 2146  , 2110  , 2117  , 2073  , 2105  ],
    [  2184  , 2194  , 2198  , 2201  , 2214  , 2230  , 2261  , 2266  , 2266  , 2228  , 2208  , 2186  , 2173  , 2158  , 2134  , 2123  , 2075  , 2106  , 2093  ],
    [  2196  , 2200  , 2204  , 2216  , 2230  , 2261  , 2276  , 2312  , 2275  , 2252  , 2224  , 2199  , 2176  , 2155  , 2140  , 2082  , 2107  , 2093  , 2102  ],
    [  2195  , 2193  , 2200  , 2205  , 2223  , 2240  , 2278  , 2276  , 2266  , 2240  , 2212  , 2188  , 2170  , 2161  , 2112  , 2116  , 2096  , 2102  , 2071  ],
    [  2192  , 2197  , 2200  , 2212  , 2226  , 2260  , 2272  , 2288  , 2279  , 2248  , 2215  , 2191  , 2173  , 2134  , 2128  , 2100  , 2102  , 2072  , 2070  ],
    [  2192  , 2194  , 2204  , 2215  , 2239  , 2253  , 2278  , 2297  , 2280  , 2245  , 2217  , 2187  , 2149  , 2144  , 2113  , 2101  , 2068  , 2066  , 2047  ],
    [  2189  , 2195  , 2202  , 2212  , 2226  , 2247  , 2275  , 2289  , 2268  , 2242  , 2207  , 2173  , 2163  , 2138  , 2123  , 2080  , 2070  , 2050  , 2065  ],
    [  2194  , 2200  , 2203  , 2212  , 2226  , 2250  , 2278  , 2286  , 2279  , 2237  , 2205  , 2181  , 2156  , 2145  , 2110  , 2089  , 2064  , 2079  , 2046  ],
    [  2201  , 2206  , 2212  , 2221  , 2238  , 2266  , 2286  , 2308  , 2274  , 2249  , 2205  , 2177  , 2162  , 2130  , 2107  , 2077  , 2088  , 2055  , 2076  ],
    [  2203  , 2207  , 2213  , 2221  , 2242  , 2262  , 2292  , 2283  , 2276  , 2229  , 2200  , 2182  , 2155  , 2139  , 2108  , 2110  , 2066  , 2086  , 2077  ],
    [  2208  , 2213  , 2221  , 2242  , 2263  , 2300  , 2302  , 2327  , 2274  , 2240  , 2204  , 2170  , 2145  , 2118  , 2114  , 2067  , 2094  , 2088  , 2066  ],
    [  2215  , 2216  , 2229  , 2235  , 2249  , 2251  , 2260  , 2245  , 2223  , 2199  , 2169  , 2150  , 2129  , 2131  , 2092  , 2106  , 2094  , 2068  , 2067  ],
// ---
    [  2171  , 2188  , 2206  , 2213  , 2216  , 2215  , 2210  , 2203  , 2197  , 2194  , 2191  , 2191  , 2190  , 2197  , 2183  , 2188  , 2181  , 2170  , 2150  , 2135  , 2141  , 2149  , 2140  , 2119  ],
    [  2158  , 2180  , 2202  , 2211  , 2214  , 2204  , 2196  , 2189  , 2188  , 2185  , 2186  , 2182  , 2184  , 2170  , 2167  , 2158  , 2150  , 2138  , 2125  ],
    [  2176  , 2188  , 2198  , 2205  , 2201  , 2200  , 2192  , 2198  , 2193  , 2197  , 2187  , 2193  , 2173  , 2172  , 2163  , 2149  , 2141  , 2129  , 2133  ],
    [  2197  , 2208  , 2206  , 2206  , 2198  , 2195  , 2194  , 2198  , 2197  , 2190  , 2195  , 2176  , 2178  , 2166  , 2157  , 2142  , 2130  , 2138  , 2135  ],
    [  2204  , 2204  , 2202  , 2201  , 2194  , 2196  , 2193  , 2199  , 2189  , 2197  , 2179  , 2185  , 2176  , 2166  , 2146  , 2135  , 2139  , 2142  , 2132  ],
    [  2207  , 2203  , 2193  , 2194  , 2188  , 2197  , 2196  , 2203  , 2206  , 2192  , 2198  , 2178  , 2172  , 2149  , 2138  , 2148  , 2149  , 2134  , 2124  ]
  ];

  // set up the console for IE
  if (!window.console) console = {
    log: function (e) {
    }
  };

  /**
   * Convenience method for logging messages.
   * @param {string} msg - the message string
   */
  function log(msg) {
    console.log(msg);
  }

  /**
   * Is the page running in Firefox?
   * @returns {boolean} - true if browser is Firefox
   */
  function isFirefox() {
    return (navigator.userAgent.search("Firefox") >= 0);
  }

  /**
   * Is the page running in MSIE?
   * @returns {boolean} - true if browser is MSIE
   */
  function isMSIE() {
    return (navigator.userAgent.search("Trident") >= 0 || navigator.userAgent.search("rv:11.0") >= 0);
  }

  /**
   * Main.
   */
  $(document).ready(function () {
    //var customSubtitle = "Updated " + latestTime.getUTCFullYear() + "-" + String(latestTime.getUTCMonth()+1).padStart(2, '0') + "-" + String(latestTime.getUTCDate()).padStart(2, '0') + " " + String(latestTime.getUTCHours()).padStart(2, '0') + ":" + String(latestTime.getUTCMinutes()).padStart(2, '0') + " UTC";

    // set global Highcharts options
    Highcharts.setOptions({
      lang: {
        thousandsSep: ''
      }
    });

    // create the auxiliary charts first, they need to exist before the main chart starts requesting data
    createAuxiliaryChart();
    createTotalCurrentChart();
    createIntervalsChart();
    createFlowAngleChart();

    // create the main chart and start requesting data
    createCycleChart();

    // do initial setup of the CSS colors after all the elements have been created
    setColorSchemeCSS();

    // set up handling for button input
    handleButtons();
  });

  /**
   * Set up handling for button input.
   */
  function handleButtons() {

    // handle the Black/White button
    var blackWhiteButton = $('#black-white-button');
    blackWhiteButton.click(function () {x
      blackBackground = !blackBackground;
      setColorSchemeCSS();
      blackWhiteButton.text((blackBackground) ? 'White' : 'Black');
    });

    // set the default MV range based on user input (or lack thereof)
    var rangeButton = $('#range_button');
    if (isFullRange()) {
      fullRange = true;
    }
    rangeButton.text((fullRange) ? 'Zoom' : 'Full');

    // handle the Range button
    rangeButton.click(function () {
      fullRange = !fullRange;
      setRange();
      rangeButton.text((fullRange) ? 'Zoom' : 'Full');
    });

    // handle the Pause button
    var restartButton = $('#restart-button');
    restartButton.click(function () {
      restart = true;
    });

    // handle the Pause button
    var pauseButton = $('#pause_button');
    pauseButton.click(function () {
      paused = !paused;
      pauseButton.text((paused) ? '>' : 'II');

      var color = (paused) ? '#93a8ed' : '';
      pauseButton.css('background', color);
    });

    // handle the Slower button
    var slowerButton = $('#slower_button');
    slowerButton.click(function () {
      replaySpeed = Math.max(replaySpeed - 1, 1);
      updateReplaySpeed();
    });

    // handle the Faster button
    var fasterButton = $('#faster_button');
    fasterButton.click(function () {
      replaySpeed = Math.min(replaySpeed + 1, 5);
      updateReplaySpeed();
    });

    if (replayDate !== '') {
      restartButton.show();
      slowerButton.show();
      fasterButton.show();
      updateReplaySpeed();
    } else {
      restartButton.hide();
      slowerButton.hide();
      fasterButton.hide();
      $('#replay_speed').hide();
    }
  }

  /**
   * Set the color scheme via CSS.
   */
  function setColorSchemeCSS() {
//    log("setcolorscheme");
    var i;
    var backgroundColor;
    var lineColor;
    var labelColor;
    var gridLineColor;

    var WHITE_BACKGROUND_COLOR = '#fefefe';
    var BLACK_BACKGROUND_COLOR = '#111111';
    var WHITE_BACKGROUND_LINE_COLOR = '#666666';
    var BLACK_BACKGROUND_LINE_COLOR = '#bbbbbb';
    var WHITE_BACKGROUND_LABEL_COLOR = '#666666';
    var BLACK_BACKGROUND_LABEL_COLOR = '#fafafa';
//    var WHITE_BACKGROUND_BORDER_COLOR = "#eeeeee";
//    var BLACK_BACKGROUND_BORDER_COLOR = "#454545";
    var WHITE_GRIDLINE_COLOR = isFirefox() ? "#CCC" : "#EEE";
    var BLACK_GRIDLINE_COLOR = isFirefox() ? "#999" : "#888";

    if (blackBackground) {
      // switch to black background with white lines
      backgroundColor = BLACK_BACKGROUND_COLOR;
      lineColor = BLACK_BACKGROUND_LINE_COLOR;
      labelColor = BLACK_BACKGROUND_LABEL_COLOR;
      gridLineColor = BLACK_GRIDLINE_COLOR;

      // main chart series
      for (i = 1; i < 14; i++) {
        $('.highcharts-color-' + (50 + i)).css('stroke', seriesColors[14 - i]);
      }

      // intervals bar
      $('.highcharts-color-30').css('fill', LIGHT_BLUE);

      // total current
      $('.highcharts-color-40').css('stroke', LIGHT_BLUE);

      // typical line
      $('.highcharts-color-70').css('stroke', '#ec62d6');

      // total current peak box
      $('#total_current rect').css('stroke', WHITE);
    } else {
      // switch to white background with black lines
      backgroundColor = WHITE_BACKGROUND_COLOR;
      lineColor = WHITE_BACKGROUND_LINE_COLOR;
      labelColor = WHITE_BACKGROUND_LABEL_COLOR;
      gridLineColor = WHITE_GRIDLINE_COLOR;

      // main chart series
      for (i = 1; i < 14; i++) {
        $('.highcharts-color-' + (50 + i)).css('stroke', seriesColors[i]);
      }

      // intervals bar
      $('.highcharts-color-30').css('fill', BLUE);

      // total current
      $('.highcharts-color-40').css('stroke', BLUE);

      // typical line
      $('.highcharts-color-70').css('stroke', 'purple');

      // total current peak box
      $('#total_current rect').css('stroke', 'gray');
    }

    // set the background/line/label colors
    $('body').css('background-color', backgroundColor);
    $('.highcharts-background').css({fill: backgroundColor, stroke: backgroundColor});
    $('.highcharts-plot-border').css('stroke', lineColor);
    $('.highcharts-axis-line').css('stroke', lineColor);
    $('.highcharts-tick').css('stroke', lineColor);
    $('.flow-line').css('stroke', lineColor);
    /* SVG text is drawn using the fill color! */
    $('.flow-label').css('fill', labelColor);
    $('.highcharts-title').css({fill: labelColor, stroke: labelColor});
    $('.highcharts-subtitle').css('stroke', labelColor);
    $('.highcharts-axis-labels').css('fill', labelColor);
    /* for just the main chart axis titles, the SVG text is drawn using the fill color */
    $('.highcharts-axis-title').css({stroke: labelColor, fill: labelColor});
    $('.highcharts-legend-item tspan').css('fill', labelColor);
    $('.highcharts-axis-labels span').css('color', labelColor);
    $('.highcharts-grid-line').css('stroke', gridLineColor);
    $('#plate').css('color', labelColor);
    $('#replay_speed').css('color', labelColor);
    $('.label').css('color', labelColor);
//    log("done setcolorscheme");
  }

  /**
   * Modify the replay speed.
   */
  function updateReplaySpeed() {
    var ms;
    var text;
    switch (replaySpeed) {
      case 1:
        ms = 20000;
        text = '1/4x';
        break;
      case 2:
        ms = 10000;
        text = '1/2x';
        break;
      case 3:
        ms = 5000;
        text = '1x';
        break;
      case 4:
        ms = 1000;
        text = '5x';
        break;
      case 5:
        ms = 1;
        text = '10x';
        break;
      default:
        ms = 1000;
        text = '5x';
        break;
    }

    // set the globals
    replaySpeedMs = ms;

    // update the display
    var replaySpeedText = $('#replay_speed');
    replaySpeedText.show();
    replaySpeedText.text(text);
  }

  /**
   * Add a rectangle to a chart.
   * @param chart - the chart to modify
   * @param left - the left edge of the rectangle, in x-axis units
   * @param right - the right edge of the rectangle, in x-axis units
   */
  function addRect(chart, left, right) {
    var y = 42;
    var height = 76;
    var radius = 10;

    $('.rect').remove();
    var xAxis = chart.xAxis[0];
    chart.renderer.rect(xAxis.toPixels(left), y, xAxis.toPixels(right) - xAxis.toPixels(left), height, radius)
        .addClass('rect')
        .add();
  }

  /**
   * Add a horizontal line to a chart.
   * @param {string} name - the class name of the line
   * @param {Object} chart - the chart to modify
   * @param {number} left - the left point of the line, in x-axis units
   * @param {number} right - the right point of the line, in x-axis units
   * @param {number} value - the vertical position of the line, in y-axis units
   * @param {string} color - the color of the line
   */
  function addHLine(name, chart, left, right, value, color) {
    // delete if exists
    $('.' + name).remove();

    var xAxis = chart.xAxis[0];
    var yAxis = chart.yAxis[0];

    // don't know why I have to add two to get the correct width...
    chart.renderer.path(['M', xAxis.toPixels(left), yAxis.toPixels(value), 'L', xAxis.toPixels(right + 2) - xAxis.toPixels(left), yAxis.toPixels(value)])
        .attr({
          'stroke-width': 1,
          stroke: color,
          fill: 'transparent',
          zIndex: 0
        }).addClass(name)
        .add();
  }

  /**
   * Add a vertical line to a chart.
   * @param {string} name - the class name of the line
   * @param {Object} chart - the chart to modify
   * @param {number} position - the x position of the line in x-axis units
   * @param {string} color - the color of the line
   */
  function addVLine(name, chart, position, color) {
    // delete if exists
    $('.' + name).remove();

    var xAxis = chart.xAxis[0];

    // move to the starting point of the line, origin is upper-left corner, then give destination y value
    chart.renderer.path(['M', xAxis.toPixels(position), 45, 'V', chart.chartHeight - 30])
        .attr({
          'stroke-width': 1,
          stroke: color,
          fill: 'transparent',
          zIndex: 20
        }).addClass(name)
        .add();
  }

  /**
   * Add a line to a chart.
   * @param {string} name - the class name of the line
   * @param {Object} chart - the chart to modify
   * @param {number} x1 - the x position of the first endpoint of the line in x-axis units
   * @param {number} y1 - the y position of the first endpoint of the line in x-axis units
   * @param {number} x2 - the x position of the second endpoint of the line in y-axis units
   * @param {number} y2 - the y position of the second endpoint of the line in y-axis units
   */
  function addLine(name, className, chart, x1, y1, x2, y2) {
    // delete if exists
    $('#' + name).remove();

    var xAxis = chart.xAxis[0];
    var yAxis = chart.yAxis[0];

    // move to the starting point of the line, origin is upper-left corner, then give destination y value
    chart.renderer.path(['M', xAxis.toPixels(x1), yAxis.toPixels(y1), 'L', xAxis.toPixels(x2), yAxis.toPixels(y2)])
        .attr({id: name})
        .addClass(className)
        .add();
  }

  /**
   * Create the main L1 cycle chart.
   */
  function createCycleChart() {
    // define the array of series before creating the chart
    var series = [];
    for (var i = 0; i < seriesNames.length; i++) {
      series.push({name: seriesNames[i], className: 'interval-class', colorIndex: 50 + i, lineWidth: seriesWidths[i], type: 'line', marker: {enabled: false}});
    }
    // the typical line should be underneath all the rest
    series.push({name: 'typical', colorIndex: 70, lineWidth: 2, dashStyle: 'longdash', zIndex: -1, type: 'spline', marker: {enabled: false}});

    // create the chart
    chart = new Highcharts.Chart({
      chart: {
        renderTo: 'container',
        plotBorderWidth: 1,
        marginRight: 110,
        animation: false, // turn off animation on redraw, looks cleaner
        events: {
//          click: function (e) {
////            log("clicked");
//            paused = !paused;
//            log("clicked, paused " + paused);
//          },
          load: function () {

            // load the user-requested replay date
            loadReplayDate();

            log("replayDate " + replayDate);

            (replayDate === '') ? requestData() : requestDataForReplay();
            //        isTest() ? requestDataForReplay() : requestData
          }
        }
      },

      title: {
        text: 'DSCOVR Faraday Cup L1 cycle peak detection'
      },

      subtitle: {
        text: customSubtitle
      },

      credits: {
        enabled: false
      },

      xAxis: {
        type: 'linear',
        tickInterval: 1,
        title: {
          text: 'modulator voltage window'
        }
      },

      yAxis: {
        type: 'linear',
        opposite: false,
        showLastLabel: true,
        endOnTick: true,
        floor: 2000,
        title: {
          text: 'multiplexed AD value',
          margin: 33
        },
        minPadding: 0.01,
        maxPadding: 0.01
      },

      legend: {
        align: 'right',
        enabled: true,
        layout: 'vertical',
        verticalAlign: 'top',
        y: 140,
        x: 12,
        title: {
          text: "   Cycle"
        }
      },

      tooltip: { //this enables the tooltip to show all plot points at once, but they are synchronized (if you dont want this, just comment it out (/**/))
        shared: true,
        crosshairs: true,
        split: false,
        animation: false,
        useHTML: true
      },

      plotOptions: {
        series: {
          connectNulls: false,
          animation: false,
          label: {
            //connectorAllowed: false
          },
          states: {
            hover: {
              enabled: false
            }
          }
        }
      },

      series: series,

      //Optional?
      responsive: {
        rules: [
          {
            condition: {
              maxWidth: 500
            },
            chartOptions: {
              legend: {
                layout: 'horizontal',
                align: 'center',
                verticalAlign: 'bottom'
              }
            }
          }
        ]
      }
    });
  }

  function createAuxiliaryChart() {
    auxChart = new Highcharts.Chart({
      chart: {
        renderTo: 'auxiliary',
        plotBorderWidth: 1,
        animation: false // turn off animation on redraw, looks cleaner
      },

      title: {
        text: 'latest MAD values'
      },

      credits: {
        enabled: true,
        text: 'NOAA Space Weather Prediction Center',
        style: {
          fontSize: '11px'
        },
        position: {
          align: 'left',
          x: 15
        }
      },

      xAxis: {
        type: 'linear',
        visible: false
      },

      yAxis: {
        type: 'linear',
//        opposite: false,
        showLastLabel: true,
        endOnTick: false,
        title: {
          text: ''
        },
        floor: 2048,
        labels: {
          enabled: false
        },
        minPadding: 0.01,
        maxPadding: 0.01
      },

      legend: {
        enabled: false
      },

      plotOptions: {
        series: {
          connectNulls: false,
          animation: false,
          label: {
          },
          states: {
            hover: {
              enabled: false
            }
          }
        }
      },

      series: [
        { // 0
          name: 'latest',
          class: 'uncorrected',
          colorIndex: 80,
          type: 'line',
          lineWidth: 1,
          marker: {
            enabled: false
          }
        }
      ],

      responsive: {
        rules: [
          {
            condition: {
              maxWidth: 500
            }
          }
        ]
      }
    });
  }

  function createTotalCurrentChart() {
    totalChart = new Highcharts.Chart({
      chart: {
        renderTo: 'total_current',
        plotBorderWidth: 1,
        animation: false // turn off animation on redraw, looks cleaner
      },

      title: {
        text: 'latest corrected total current (pA)'
      },

      credits: {
        enabled: false
      },

      xAxis: {
        type: 'linear',
        tickInterval: 2,
        labels: {
          enabled: true
        }
      },

      yAxis: {
        type: 'linear',
        showLastLabel: true,
        endOnTick: true,
        tickInterval: 100,
        title: {
          text: ''
        },
        labels: {
          enabled: true
        },
        minPadding: 0.01,
        maxPadding: 0.01
      },

      legend: {
        enabled: false
      },

      plotOptions: {
        series: {
          connectNulls: false,
          animation: false,
          label: {
          },
          states: {
            hover: {
              enabled: false
            }
          }
        }
      },

      series: [
        {
          name: 'total current',
          colorIndex: 40,
          type: 'line',
          lineWidth: 1,
          marker: {
            enabled: true,
            radius: 2
          }
        }
      ],

      responsive: {
        rules: [
          {
            condition: {
              maxWidth: 500
            }
          }
        ]
      }
    });
  }

  /**
   * Create the chart showing the measurement interval window.
   */
  function createIntervalsChart() {
    intervalsChart = new Highcharts.Chart({
      chart: {
        renderTo: 'intervals',
        plotBorderWidth: 1,
        animation: false // turn off animation on redraw, looks cleaner
      },

      title: {
        text: null
      },

      legend: {
        enabled: false
      },

      credits: {
        enabled: false
      },

      xAxis: {
        type: 'linear',
        visible: false,
        min: 0,
        max: 63,
        tickInterval: 1,
        labels: {
          enabled: false
        }
      },

      yAxis: {
        min: 0,
        max: 1,
        visible: false
      },

      series: [
        {
          name: 'intervals',
//          className: 'interval-class',
          colorIndex: 30,
          type: 'area',
          marker: {
            enabled: false
          }
        }
      ],

      responsive: {
        rules: [
          {
            condition: {
              maxWidth: 500
            }
          }
        ]
      }
    });
  }


  /**
   * Create the chart showing the flow angle.
   */
  function createFlowAngleChart() {

    // Define a custom symbol path
    Highcharts.SVGRenderer.prototype.symbols.cross = function (x, y, w, h) {
      return ['M', x, y, 'L', x + w, y + h, 'M', x + w, y, 'L', x, y + h, 'z'];
    };
    if (Highcharts.VMLRenderer) {
      Highcharts.VMLRenderer.prototype.symbols.cross = Highcharts.SVGRenderer.prototype.symbols.cross;
    }

    var series = [];
    for (var i = 0; i < seriesNames.length; i++) {
      series.push({name: seriesNames[i], className: 'flow-circle', colorIndex: 50 + i, lineWidth: seriesWidths[i], type: 'scatter',
        marker: {symbol: 'circle', radius: 45, lineColor: seriesColors[i], 'lineWidth': seriesWidths[i], fillColor: 'transparent', states: {hover: {enabled: false}}}});
    }

    // create the chart
    flowAngleChart = new Highcharts.Chart({
      chart: {
        type: 'scatter',
        renderTo: 'flowAngle',
        plotBorderWidth: 1,
        animation: false,  // turn off animation on redraw, looks cleaner
        margin: 0,
        width: 150, // force the chart to be square so we can inscribe a circle
        height: 150
      },

      title: {
        text: null
      },

      credits: {
        enabled: false
      },

      legend: {
        enabled: false
      },

      tooltip: {
        valueDecimals: 2
      },

      xAxis: {
        type: 'linear',
        visible: false,
        min: -1,
        max: 1,
        tickInterval: 1,
        labels: {
          enabled: false
        }
      },

      yAxis: {
        type: 'linear',
        visible: false,
        min: -1,
        max: 1,
        tickInterval: 1,
        labels: {
          enabled: false
        }
      },

      series: series,

      responsive: {
        rules: [
          {
            condition: {
              maxWidth: 500
            }
          }
        ]
      }
    });

    // translate my coordinates to pixel values
    var pixelX = flowAngleChart.xAxis[0].toPixels(0);
    var pixelY = flowAngleChart.yAxis[0].toPixels(0);
    var pixelR = Math.min(flowAngleChart.chartHeight - 1, flowAngleChart.chartWidth - 1) / 2;

    // add a circle
    flowAngleChart.renderer.circle(pixelX, pixelY, pixelR).attr({class: 'flow-line'}).addClass('circle').add();

    // values in user space
    var x1 = 0;
    var y1 = 0;
    addLine('lineA', 'flow-line', flowAngleChart, x1, y1, Math.cos(toRadians(90)), Math.sin(toRadians(90)));
    addLine('lineB', 'flow-line', flowAngleChart, x1, y1, Math.cos(toRadians(210)), Math.sin(toRadians(210)));
    addLine('lineC', 'flow-line', flowAngleChart, x1, y1, Math.cos(toRadians(330)), Math.sin(toRadians(330)));

    var color = RED; //'#d3dded';
    addText('plateA', 'flow-label', flowAngleChart, 'A', -0.65, 0.15, color);
    addText('plateB', 'flow-label', flowAngleChart, 'B', 0.3, 0.15, color);
    addText('plateC', 'flow-label', flowAngleChart, 'C', -0.25, -0.7, color);

//    var h = 0.46;
//    var i = h * Math.tan(toRadians(0));
//    var j = h * Math.tan(toRadians(40));
//
//    flowAngleChart.series[15].setData([
//      [i, j]
//    ]);
  }

  /**
   * Add a text element.
   * @param {string} name - the element id
   * @param {string} className - the element class name
   * @param {Object} chart - the chart
   * @param {string} text - the text
   * @param {number} x - the x position of the text, in x-axis units
   * @param {number} y - the y position of the text, in y-axis units
   * @param {string} color - the color
   */
  function addText(name, className, chart, text, x, y, color) {
    remove(name);

    // add text
    chart.renderer.text(text, chart.xAxis[0].toPixels(x), chart.yAxis[0].toPixels(y))
        .css({
          color: color
        })
        .attr({id: name})
        .addClass(className)
        .add();
  }

  /**
   * Remove an element by id.
   * @param {string} name - the element id
   */
  function remove(name) {
    $('#' + name).remove();
  }

  /**
   * Extract the cycles from the JSON data.
   * @param {Array} data - the JSON data
   * @returns {Array.<Object>} - array of Cycle objects
   */
  function extractCycles(data) {
    var k;
    // reset the data
    var cycles = [];
    minModlow = 63;
    maxModlow = 0;
    maxCount = 0;
    var yMin = 10000;
    var yMax = -10000;

    $.each(data, function (i, value) {
//      log(i + " " + JSON.stringify(value));
      var cycle = {};
      cycle.timestamp = value[0];

      var modlow = parseInt(value[1]);
      cycle.modlow = modlow;
      minModlow = (modlow < minModlow) ? modlow : minModlow;
      maxModlow = (modlow > maxModlow) ? modlow : maxModlow;

      cycle.start = parseInt(value[2]);
      cycle.peak = parseInt(value[3]);
      cycle.end = parseInt(value[4]);

      var count = parseInt(value[6]);
      cycle.count = count;
      maxCount = (count > maxCount) ? count : maxCount;

      cycle.speed = parseFloat(value[7]);
      cycle.density = parseFloat(value[8]);
      cycle.temperature = parseFloat(value[9]);

      cycle.peakPa = parseFloat(value[10]);
      cycle.phi = parseFloat(value[12]);
      cycle.theta = parseFloat(value[13]);
      cycle.plate = parseInt(value[14]);
      cycle.peakInterval = parseInt(value[15]);
      cycle.peakMV = cycle.modlow + cycle.peakInterval;
      cycle.peakMadvalue = parseInt(value[16]);

      // load the total collector currents
      // expecting the peak tracking currents to start at index 17
      cycle.iktot = [];
      for (k = 0; k < count; k++) {
        var token = value[17 + k];
        var tot = parseFloat(token);
        cycle.iktot.push(tot);
      }

      // left pad by inserting nulls as needed
      for (k = 0; k < cycle.modlow; k++) {
        cycle.iktot.unshift(null);
      }

      // madvalues start immediately after the ikTots, each contains only the peak tracking intervals
      let indexA = 17 + count;
      let indexB = indexA + count;
      let indexC = indexB + count;

      cycle.madvaluesA = [];
      cycle.madvaluesB = [];
      cycle.madvaluesC = [];
      for (k = 0; k < count; k++) {
        // used to expect 24-interval windows, now variable size
        cycle.madvaluesA.push(parseInt(value[indexA + k]));
        cycle.madvaluesB.push(parseInt(value[indexB + k]));
        cycle.madvaluesC.push(parseInt(value[indexC + k]));
      }

      // insert nulls as needed to make cycles with different modlows align correctly
      for (var ml = 0; ml < cycle.modlow; ml++) {
        cycle.madvaluesA.unshift(null);
        cycle.madvaluesB.unshift(null);
        cycle.madvaluesC.unshift(null);
      }

      cycle.state = value[113];

      // add this cycle to the array
      cycles.push(cycle);
    });

    // package up the result
    var result = {};
    result.cycles = cycles;
    result.minModlow = minModlow;
    result.maxModlow = maxModlow;
    result.maxCount = maxCount;

    return result;
  }

  /**
   * Request the json file from the server, extract the data and build the cycles, then update the charts.
   */
  function requestData() {
    var k;
//    log("requestData");

    if (paused) {
      // try again in a second to see if the user unpaused
      setTimeout(requestData, PAUSE_DELAY_MS);
    } else {

      $.getJSON('http://' + HOST + ':8080/rtsw/json/fc.json')
          .done(function (data) {
//          log("got data");
//          log("requestData: data " + JSON.stringify(data));

            // extract the cycles from the JSON data
            var result = extractCycles(data);
//          log("# of cycles " + result.cycles.length + " cycles size " + cycles.length);
//          log("result " + JSON.stringify(result));

            // save off the most recent cycle
            var recentCycle = result.cycles[result.cycles.length - 1];

            // pre-load at startup
            if (cycles.length === 0) {
              for (k = 0; k < 16; k++) {
                cycles.push(recentCycle);
              }
//            log("pre-loaded real-time cycles " + cycles.length);
            }

            // trim the array to just the last minute
            if (cycles.length >= 16) {
              // remove the oldest cycle
              cycles.shift();
//            log("trimmed real-time cycles " + cycles.length);
            }

//          log("state " + recentCycle.state);
            if (recentCycle.state === 'good') {
              prevLastGoodCycle = lastGoodCycle;
              lastGoodCycle = recentCycle;
            }

            // replace the first cycle with this one
            if (lastGoodCycle !== undefined) {
              cycles.shift();
              cycles.unshift(lastGoodCycle);
//            log("unshifted real-time cycles " + cycles.length);
            }

            // add the most recent cycle at the end
            cycles.push(recentCycle);
//          log("ready to process real-time cycles " + cycles.length);

            updateAllCharts();

//            for (var i = 0; i < 10000000000; i++) {
//              var x = 2;
//            }
          })
          .fail(function (error) {
            log("error " + JSON.stringify(error))
          });

      // repeat after 5 seconds
      setTimeout(requestData, UPDATE_DELAY_MS);
    }
//    log("done requestData");
  }

  var count = 0;

  function updateAllCharts() {
//    log("updateallcharts");
    updateCycleChart();

    updateAuxiliaryChart();
    updateTotalCurrentChart();
    updateIntervalsChart();
    updateFlowAngleChart();

    // set the color of any newly created elements (in particular, dynamic x-axis labels)
    setColorSchemeCSS();
//    log("done updateallcharts");

//    if (count++ === 2) {
//      saveDataToImage();
//    }
  }

  /**
   * Request the json file from the server, extract the data and build the cycles, then update the charts.
   */
  function requestDataForReplay() {

//    // load the user-requested replay date
//    loadReplayDate();
//
//    log("replayDate " + replayDate);

    // invoke replay via http://ncs-rtsw-proc-lx:8080/rtsw/dscovrfc?replay=bump (or bump2, bump3, replay)
    $.getJSON('http://' + HOST + ':8080/rtsw/json/fc_' + replayDate + '.json')
//    $.getJSON('http://' + HOST + ':8080/rtsw/json/fc_20180616.json')
//    $.getJSON('http://' + HOST + ':8080/rtsw/json/fc_replay.json')

        .done(function (data) {
//          log("requestDataForReplay " + data.length);
//          log("got data " + JSON.stringify(data));

          // extract the cycles from the JSON data
          var result = extractCycles(data);
//          log("# of cycles " + result.cycles.length + " cycles size " + cycles.length);
//          log("result " + JSON.stringify(result));

          // save all the cycles for replaying
          replayCycles = result.cycles;

          // start replay
          replay();
        })
        .fail(function (error) {
          log("error " + JSON.stringify(error));
//          if (error.)
          // pull data from /dscovr/webfiles/data/fc_replay.json
          alert('no data found for ' + replayDate + ' defaulting to data captured 20180612');
          replayDate = 'replay';
          requestDataForReplay();

//          Highcharts provide handling for no data. You need to add highcharts module called no-data-to-display.js after highcharts.js loaded
//          http://api.highcharts.com/highcharts/noData
//              & To customize error message http://api.highcharts.com/highcharts/noData/lang.noData
        });
  }

  var cycleIndex = 17;

  /**
   *
   */
  function replay() {
    var k;
    var n;
//    log("replay paused " + paused + " restart " + restart + ' cycleIndex ' + cycleIndex);

    if (paused) {
//      log("replay paused");
      // try again in a second
      setTimeout(replay, PAUSE_DELAY_MS);
    } else {
      // user forced a restart for the current data set
      if (restart) {
        restart = false;
        prevLastGoodCycle = undefined;
        cycleIndex = 17;
        // reset the replay speed
        replaySpeed = 4;
        updateReplaySpeed();
      }

//      log("replay not paused");
      var recentCycle = replayCycles[cycleIndex++];
//    log("replay " + cycleIndex + " " + JSON.stringify(recentCycle));

      if (cycleIndex > 17) {

        cycles = [];

        // load this set
        for (k = 0; k < 16; k++) {
          cycles.push(replayCycles[cycleIndex - k]);
//        log("pre-load replay cycles " + cycles.length);
        }

        // trim the array to just the last minute
        if (cycles.length >= 16) {
          // remove the oldest cycle
          cycles.shift();
//        log("trimmed real-time cycles " + cycles.length);
        }
      }
      if (recentCycle === undefined) {
        log("done");
      } else {
//     log("recent state " + recentCycle.state);
        if (recentCycle.state === 'good') {
          prevLastGoodCycle = lastGoodCycle;
          lastGoodCycle = recentCycle;

          // handle first time through
          if (prevLastGoodCycle === undefined) {
            prevLastGoodCycle = recentCycle;
          }

//          if (prevLastGoodCycle !== undefined) {
//            log("setting lastgood " + lastGoodCycle.timestamp + " prevlast " + prevLastGoodCycle.timestamp);
//          }
          spiking = false;
        } else {
          spiking = true;
        }

//        log("lastGood " + lastGoodCycle);

        // replace the first cycle with the last good
        cycles.shift();

        if (spiking) {
//          log("unshifting prevLast " + prevLastGoodCycle);
          cycles.unshift(prevLastGoodCycle);
        } else {
//          log("unshifting last " + lastGoodCycle);
          cycles.unshift(lastGoodCycle);
        }
//        log(recentCycle.timestamp + " state is good, unshift cycles " + cycles.length);

        // add the most recent cycle
        cycles.push(recentCycle);
        //     log("ready to process replay cycles " + cycles.length);

        updateAllCharts();
      }

//      log("calling setTimeout "+ replaySpeedMs);

      // move to the next one as fast as possible
      setTimeout(replay, replaySpeedMs);
    }
  }

  /**
   * Update the main chart with the new data.
   */
  function updateCycleChart() {
    var k;
    var n;

    minModlow = 63;
    maxModlow = 0;
    maxCount = 0;
    for (k = 0; k < cycles.length; k++) {
      var modlow = cycles[k].modlow;
      var count = cycles[k].count;
      minModlow = (modlow < minModlow) ? modlow : minModlow;
      maxModlow = (modlow > maxModlow) ? modlow : maxModlow;
      maxCount = (count > maxCount) ? count : maxCount;
    }
//      log('avg ' + JSON.stringify(avg));

    // set the main chart modulator voltage range
    setRange();

    // the latest cycle
    var cycle = cycles[15];

    // zoom the x-axis to just the intervals of interest, with 1 interval margin on each side
    totalChart.xAxis[0].update({min: Math.max(cycle.modlow - 1, 0)});
    totalChart.xAxis[0].update({max: Math.min(cycle.modlow + cycle.count, 63)});

//          var delta = yMax - yMin;
//          log("delta " + delta + " yMin " + yMin + " yMax " + yMax);
//          yMin = Math.ceil(yMin / 100) * 100;
//          yMax = (Math.floor(yMax / 100) + 1) * 100;
//          log("new yMin " + yMin + " yMax " + yMax);
//          totalChart.yAxis[0].update({min: yMin});
//          totalChart.yAxis[0].update({max: yMax});

    // clear the old data points. Not sure why this is necessary, but it is!
    for (n = 0; n < cycles.length; n++) {
      chart.series[n].setData([]);
    }

    // update the chart with the new data
    for (n = 0; n < cycles.length; n++) {
      chart.series[n].setData(getPeakPlateMadvalues(cycles[n]));
    }

    // can't use modlow anymore (always 0!), so compute the start to replicate a 19-interval tracking window position
    let avgStart = cycle.count - 19;

    // build the average line to append
    var avg = [];
    for (var m = 0; m < avgMadvalues[avgStart].length; m++) {
      avg.push(avgMadvalues[avgStart][m]);
    }

    // insert nulls as needed to align the average curve with the most recent cycle
    for (var ml = 0; ml < avgStart; ml++) {
      avg.unshift(null);
    }

    // add the average line at the end
    chart.series[cycles.length].setData(avg);

//    addHLine('peakMad', chart, 0, 63, cycle.peakMadvalue, 'red');

    // add a vertical line at the peak on the main chart
    addVLine('peakmv', chart, cycle.peakMV, 'gray');

    chart.setTitle(null, {text: cycle.timestamp});

    $('#plate').text(getPlateLetter(cycle.plate));
    $('#madvalue').text('MAD: ' + cycle.peakMadvalue);
    $('#mv').text('MV: ' + cycle.peakMV);
    // display the 1-based interval offset, since user's are expecting the peak to be at interval 8
    $('#interval').text('Interval: ' + (cycle.peakInterval + 1));
    $('#speed').text('Speed: ' + cycle.speed);
    $('#density').text('Density: ' + cycle.density.toFixed(1));
    $('#temp').text('Temp: ' + cycle.temperature);

    // show how long it's been bad
    badSince();
  }

  /**
   * Add a floating label showing how long it's been since the data was good.
   */
  function badSince() {
    var name = 'since';

    if (spiking) {
      var seconds = parseDate(cycles[15].timestamp) - parseDate(cycles[0].timestamp);
//    log("seconds " + seconds);

      var since = '-';
      if (seconds > 86400 * 2) {
        since += (seconds / 86400).toFixed(1) + 'd';
      } else if (seconds > 3600) {
        since += (seconds / 3600).toFixed() + 'h';
      } else if (seconds > 60) {
        since += (seconds / 60).toFixed() + 'm';
      } else {
        since += seconds + 's';
      }

      // position the label horizontally near the peak
      var x = prevLastGoodCycle.peakInterval;
      if (fullRange) {
        x += prevLastGoodCycle.modlow;
      }

      // position the label above all of the visible peaks
      var y = 0;
      for (var i = 0; i < cycles.length; i++) {
        y = Math.max(y, cycles[i].peakMadvalue);
      }

      // add the label
      // DISABLE, no longer applies after 8/26/20 FSW patch
//      addText(name, 'bad-since-label', chart, since, x, y + 10, GREEN);
    } else {
      remove(name);
    }
  }

  /**
   * Parse an ISO8601 date string and return the approximate # of seconds.
   * @param {string} timestamp - the timestamp
   * @returns {number} - the number of seconds since year 0
   */
  function parseDate(timestamp) {
    // 2018-06-17T21:30:45
    var year = parseInt(timestamp.substring(0, 4));
    var month = parseInt(timestamp.substring(5, 7));
    var day = parseInt(timestamp.substring(8, 10));
    var hour = parseInt(timestamp.substring(11, 13));
    var minute = parseInt(timestamp.substring(14, 16));
    var second = parseInt(timestamp.substring(17, 19));

//    log("year " + year + " month " + month + " day " + day + " hour " + hour + " minute " + minute + " second " + second);
    return (365 * 86400 * year) + (30 * 86400 * month) + (86400 * day) + (3600 * hour) + (60 * minute) + second;
  }

  /**
   * Set the modulator voltage range of the main chart.
   */
  function setRange() {
    if (fullRange) {
      // use the full range
      chart.xAxis[0].update({min: 0});
      chart.xAxis[0].update({max: 63});
//      $('#intervals').hide();
    } else {
      // zoom the x-axis to just the intervals of interest, with 1 interval margin on each side
      chart.xAxis[0].update({min: Math.max(minModlow - 1, 0)});
      chart.xAxis[0].update({max: Math.min(maxModlow + maxCount, 63)});
//      $('#intervals').show();
    }
  }

  /**
   * Update the uncorrected madvalues for each plate chart.
   */
  function updateAuxiliaryChart() {
    var cycle = cycles[15];

    // build a single array with the madvalues for each plate of the most recent cycle
    var data = [];
    data.push(null);
    cycle.madvaluesA.forEach(function (element) {
      if (element !== null) {
        data.push(element);
      }
    });
    data.push(null);
    cycle.madvaluesB.forEach(function (element) {
      if (element !== null) {
        data.push(element);
      }
    });
    data.push(null);
    cycle.madvaluesC.forEach(function (element) {
      if (element !== null) {
        data.push(element);
      }
    });
    data.push(null);

    auxChart.series[0].setData(data);
  }

  /**
   * Update the corrected total current chart.
   */
  function updateTotalCurrentChart() {
    var cycle = cycles[15];

    totalChart.series[0].setData(cycle.iktot);
    var NOISE_THRESHOLD = 20;
    addHLine('noise', totalChart, cycle.modlow, cycle.modlow + cycle.count, NOISE_THRESHOLD, 'gray');
    addHLine('threshold', totalChart, cycle.modlow, cycle.modlow + cycle.count, cycle.peakPa / 10, 'red');
    addVLine('peak', totalChart, cycle.modlow + cycle.peak, 'gray');

    addRect(totalChart, cycle.modlow + cycle.start, cycle.modlow + cycle.end);
  }

  /**
   * Update the data in the intervals chart.
   */
  function updateIntervalsChart() {
    var cycle = cycles[15];
    var data = getPeakPlateMadvalues(cycle);
    intervalsChart.series[0].setData(data);
//    intervalsChart.series[0].setData([cycle.modlow, cycle.modlow+cycle.count]);
  }

  /**
   * Update the data in the flow angle chart.
   */
  function updateFlowAngleChart() {
    for (var n = 0; n < cycles.length; n++) {
      var phi = cycles[n].phi;
      var theta = cycles[n].theta;

      var i = H * Math.tan(toRadians(phi));
      var j = H * Math.tan(toRadians(theta));

//      log("phi deg " + phi + " rad " + toRadians(phi) + " tan " + Math.tan(toRadians(phi)) +
//          " theta deg " + theta + " rad " + toRadians(theta) + " tan " + Math.tan(toRadians(theta)) + " i " + i + " j " + j);

      flowAngleChart.series[n].setData([
        [i, j]
      ]);

//      if (n === 15) {
//        log("phi deg " + phi + " theta " + theta + " i " + i + " j " + j);
//      }
    }

//    log("max ij " + Math.tan(toRadians(-30)));


//    angle += 30;
//
//    // values in user space
//    var x1 = 0;
//    var y1 = 0;
//    log("angle " + angle + " rad " + toRadians(angle) + " cos " + Math.cos(toRadians(angle)) + " sin " + Math.sin(toRadians(angle)));
//    $('.lineA').remove();
//    addLine('lineA', flowAngleChart, x1, y1, Math.cos(toRadians(angle)), Math.sin(toRadians(angle)), 'green');
  }

//  var angle = 0;

  /**
   * Convert from degrees to radians.
   *
   * @param angle - angle in degrees
   * @returns {number} - angle in radians
   */
  function toRadians(angle) {
    return angle * (Math.PI / 180);
  }

  /**
   * Get the letter associated with this plate.
   * @param plate
   * @returns {string}
   */
  function getPlateLetter(plate) {
    switch (plate) {
      case 0:
        return 'A';
        break;
      case 1:
        return 'B';
        break;
      case 2:
        return 'C';
        break;
      default:
        return 'X';
    }
  }

  /**
   * Get the madvalue array for the peak plate.
   * @param cycle - the cycle being viewed
   * @returns {Array} - the madvalue array
   */
  function getPeakPlateMadvalues(cycle) {
    switch (cycle.plate) {
      case 0:
        return cycle.madvaluesA;
        break;
      case 1:
        return cycle.madvaluesB;
        break;
      case 2:
        return cycle.madvaluesC;
        break;
      default:
        return [];
    }
  }

//  $('#container').on('mousedown', function () {
//    $(this).toggleClass('modal');
//    log("clicked");
//  });

  /**
   * Return the value of a variable in the URL string.
   * For example, the variable 'param' would return 'something' for the URL http://host:8080/rtsw/graph?param=something.
   * @param variable
   * @returns {*}
   */
  function getQueryVariable(variable) {
    var query = window.location.search.substring(1);
    var vars = query.split("&");
    for (var i = 0; i < vars.length; i++) {
      var pair = vars[i].split("=");
      if (pair[0] == variable) {
        return pair[1];
      }
    }
    return false;
  }

  /**
   * Determine if this page should show features being tested.
   * @returns {boolean}
   */
  function isTest() {
    return (getQueryVariable('user') === 'test');
  }

  /**
   * Determine if the main chart should show the full 0-63 range.
   * @returns {boolean}
   */
  function isFullRange() {
    return (getQueryVariable('range') === 'full');
  }

  /**
   * Get the user-requested replay date.
   */
  function loadReplayDate() {
    var date = getQueryVariable("replay");
    // was a replay date specified?
    if (date != false) {
      // remove any dashes, e.g., 2018-06-16 -> 20180616
      date = date.split('-').join('');
      log("date " + date);

      // is this a number?
//      if ($.isNumeric(date) && Math.floor(date) == +date) {
//        log(date + " is an integer");
      // overwrite the global
      replayDate = date;
//      }
    }
  }

//  /**
//   * (d3-specific) Save the currently displayed plots to a .png image file on the client machine.
//   */
//  function saveDataToImage() {
//    log("saving data to image");
//    // define the SVG XML header
//    var doctype = '<?xml version="1.0" standalone="no"?>'
//        + '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">';
//
////    // select all of the hover_readout elements
////    var readouts = $('.hover_readout');
////
////    // temporarily hide the hover readouts
////    readouts.hide();
//
//    // serialize the SVG to an XML string
//    var source = (new XMLSerializer()).serializeToString(d3.select('svg').node());
//
//    // create a file blob of the SVG
//    var blob = new Blob([doctype + source], { type: 'image/svg+xml;charset=utf-8' });
//
//   /* // show the hover readouts
//    readouts.show();*/
//
//    // cross-browser URL handling
//    window.URL = window.URL || window.webkitURL;
//    var url = window.URL.createObjectURL(blob);
//
//    // put the svg into an image tag so that the canvas element can read it in
//    var img = d3.select('body').append('img')
//        .attr('width', full_width)
//        .attr('height', full_height)
//        .node();
//
//    // define the image onload function inline
//    img.onload = function () {
//
//      log("onload");
//      // now that the image has loaded, draw the image onto a canvas element
//      var canvas = d3.select('body').append('canvas').node();
//      canvas.width = full_width;
//      canvas.height = full_height;
//      var ctx = canvas.getContext('2d');
//      ctx.drawImage(img, 0, 0);
//
//      // TODO add date to the filename, talk to Doug
////      var start = moment.utc(visibleStart()).format(DATE_FORMAT_FILENAME);
//
//      // write the final rendered canvas element to a PNG file
//      canvas.toBlob(function (blob) {
//        log("saveDataToImage: about to call saveAs with blob");
//        saveAs(blob, 'rtsw_plot_' + start + '.png');
//        saveAs(blob, 'plot_image_.png');
//      });
//
//      // clean up, otherwise the canvas will be displayed at the bottom of the page
//      canvas.remove();
//    };
//
//    // start loading the image to invoke the onload()
//    img.src = url;
//
//    // clean up, otherwise the image will be displayed at the bottom of the page
//    img.remove();
//  }

}(jQuery));